<<babel-init>>

* User details

 #+begin_src emacs-lisp
 (setq user-full-name "Daniel Clark")
 (setq user-mail-address "daniel@qcode.co.uk")
 #+end_src
* Environment

 #+begin_src emacs-lisp
 (require 'cl)
 #+end_src
* Package management

#+begin_src emacs-lisp
 (load "package")
 (package-initialize)
 (add-to-list 'package-archives
              '("marmalade" . "http://marmalade-repo.org/packages/"))
 (add-to-list 'package-archives
              '("melpa" . "http://melpa.org/packages/") t)

 (setq package-archive-enable-alist '(("melpa" deft magit)))
#+end_src

* Define default packages

 #+begin_src emacs-lisp
 (defvar daniel/packages '(ac-slime
 			    ac-emmet
 			    ac-etags
 			    achievements
 			    aggressive-indent
 			    auto-complete
 			    autopair
                            color-theme-sanityinc-tomorrow
 			    comment-dwim-2
 			    emmet-mode
 			    feature-mode
 			    flycheck
                            flx-ido
 			    gist
 			    htmlize
                            key-chord
 			    magit
 			    markdown-mode
                            monokai-theme
 			    multi-term
 			    multiple-cursors
 			    paredit
                            projectile
 			    scss-mode
 			    smex
 			    solarized-theme
 			    undo-tree
 			    web-mode
 			    )
   "Default packages")
 #+end_src

* Install default packages

 #+begin_src emacs-lisp
 (defun daniel/packages-installed-p ()
   (loop for pkg in daniel/packages
         when (not (package-installed-p pkg)) do (return nil)
         finally (return t)))

 (unless (daniel/packages-installed-p)
   (message "%s" "Refreshing package database...")
   (package-refresh-contents)
   (dolist (pkg daniel/packages)
     (when (not (package-installed-p pkg))
       (package-install pkg))))
#+end_src

* Set a bunch of defaults

#+begin_src emacs-lisp
;; Menu bar visible?
(menu-bar-mode 1)

;; Tool bar visible?
(tool-bar-mode 1)

;; Scroll bars visible?
(scroll-bar-mode -1)

;; Enable line numbers
(global-linum-mode 1)

;; Offset the number to work around some weird fringe glitch
;;(setq linum-format "%d  ")

;; Inhibit start-up screen?
(setq inhibit-startup-screen 1)

;; Inhibit Splash screen?
(setq inhibit-splash-screen 1)

;; Show Initial scratch message?
(setq initial-scratch-message "")

;; Auto-reload buffers when they change
(global-auto-revert-mode 1)

;; Highlights current line
;;(global-hl-line-mode 1)

;; Disable line-wrap
(set-default 'truncate-lines t)

;; Allow line wrap in split screen mode
(setq truncate-partial-width-windows nil)

;; Switch on match bracket
(show-paren-mode)

;; Auto-closing parenthesis
;;(electric-pair-mode 1)

;; Auto-indent current and new lines
(electric-indent-mode 1)

;; Delete trailing white space on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Disable all version control
(setq vc-handled-backends nil)

#+end_src

** Disable prompts
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)

(setq confirm-nonexistent-file-or-buffer nil)

(setq ido-create-new-buffer 'always)

(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)

(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
        kill-buffer-query-functions))
#+end_src
** Backup files
#+begin_src emacs-lisp
;; puts backup files into temp directory rather than cluttering up file tree
;;(setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))

;; stop emacs creating backup files
(setq make-backup-files nil)

#+end_src

** Auto Save files
#+begin_src emacs-lisp
;; puts auto save files into temp directory rather than cluttering up file tree
;;(setq auto-save-file-name-transforms `((".*", (concat user-emacs-directory "auto-save"))))

;; stop emacs creating auto save files
(setq auto-save-default nil)

#+end_src


* Cua-mode

#+begin_src emacs-lisp
(cua-mode t)
(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
(transient-mark-mode 1)               ;; No region when it is not highlighted
(setq cua-keep-region-after-copy t)   ;; Standard Windows behaviour
#+end_src

* Smex

#+begin_src emacs-lisp
(setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

* Ido

#+begin_src emacs-lisp
(require 'ido)
(ido-mode 'both)
(setq
    ido-enable-flex-matching t
    ido-use-virtual-buffers t
    ido-create-new-buffer 'always
    find-file-wildcards t
    ido-max-prospects 10
    ido-ignore-extensions t
    ido-file-extensions-order '(".tcl" ".scss" ".css" ".md" ".org" ".txt" ".emacs")
    ido-ignore-directories '(".sass-cache/load")
    ido-ignore-files '("\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./" "^TAGS$" "*DS_Store" "*.map")
    ido-ignore-directories '("\\`\\.\\./" "\\`\\./")
    ido-ignore-buffers '("^TAGS$" "\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace" "^\*compilation" "^\*TAGS" "^session\.*" "^\*")
)

;; http://www.reddit.com/r/emacs/comments/21a4p9/use_recentf_and_ido_together/cgbprem
(add-hook 'ido-setup-hook (lambda () (define-key ido-completion-map [up] 'previous-history-element)))

(require 'flx-ido)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-use-faces nil)

#+end_src

* Autopair-mode

#+begin_src emacs-lisp
(require 'autopair)
#+end_src

* Auto-complete

#+begin_src emacs-lisp
;;(require 'auto-complete-config)
;;(add-to-list 'ac-dictionary-directories "/home/daniel/.emacs.d/ac-dict")
;;(ac-config-default)
;;(ac-flyspell-workaround)
;;(add-to-list 'ac-modes 'tcl-mode)
;;(add-to-list 'ac-modes 'lisp-mode)
;;(add-to-list 'ac-modes 'text-mode)
;;(add-to-list 'ac-modes 'html-mode)
;;(add-to-list 'ac-modes 'javascript-mode)
;;(add-to-list 'ac-modes 'css-mode)

;;(setq ac-auto-show-menu 0.00)
;;(setq ac-delay 0.00)
#+end_src

* Undo-tree-mode

#+begin_src emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode 1)
#+end_src

* Web mode

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-tag-auto-close-style 1)
  (setq web-mode-markup-indent-offset 4)
#+end_src

* TCL mode

#+begin_src emacs-lisp
;; Open files ending in  .test  in tcl-mode
(add-to-list 'auto-mode-alist '("\\.test\\'". tcl-mode))
#+end_src

* Multiple cursors

#+begin_src emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

* Aggressive-indent-mode

#+begin_src emacs-lisp
(require 'aggressive-indent)

(global-aggressive-indent-mode)
(add-to-list 'aggressive-indent-excluded-modes 'tcl-mode)


;; disable in term-mode
(add-hook 'term-mode-hook (lambda()
    (aggressive-indent-mode -1))
)
#+end_src

* Scss-mode

#+begin_src emacs-lisp
(require 'scss-mode)

;;disable scss auto-compilation
(setq scss-compile-at-save nil)
#+end_src

* Disable prompts

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src

* Custom functions
** New empty buffer

#+begin_src emacs-lisp
(defun new-empty-buffer ()
  "Open a new empty buffer."
  (interactive)
  (let ((buf (generate-new-buffer "untitled")))
    (switch-to-buffer buf)
    (funcall (and initial-major-mode))
    (setq buffer-offer-save t)))

(setq initial-major-mode (quote text-mode))
#+end_src

** Toggle comment

#+begin_src emacs-lisp
(defun toggle-comment-region ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
     (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

(setq swapping-buffer nil)
(setq swapping-window nil)

(defun comment-toggle (&optional arg)
  "Replacement for the comment-dwim command.
        If no region is selected and current line is not blank and we are not at the end of the line,
        then comment current line.
        Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    (comment-dwim arg)))

(global-set-key (kbd "M-/") 'comment-toggle)
#+end_src

** Smart beginning of line

#+begin_src emacs-lisp
(defun smart-beginning-of-line ()
  ;;  "Move point to first non-whitespace character or beginning-of-line.
  ;;Move point to the first non-whitespace character on this line.
  ;;If point was already at that position, move point to beginning of line."
  (interactive)
  (let ((oldpos (point)))
    (back-to-indentation)
    (and (= oldpos (point))
         (beginning-of-line))))
(global-set-key [home] 'smart-beginning-of-line)
(global-set-key "\C-a" 'smart-beginning-of-line)
#+end_src

** Rename current buffer file

#+begin_src emacs-lisp
   (defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

                   (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
#+end_src

** Sudo save

   #+begin_src emacs-lisp
(defun sudo-save ()
  (interactive)
  (if (not buffer-file-name)
      (write-file (concat "/sudo:root@localhost:" (ido-read-file-name "File:")))
      (write-file (concat "/sudo:root@localhost:" buffer-file-name))))
   #+end_src

** dev
#+begin_src emacs-lisp
(defun dev-frame-title (title)
  "Set frame title to:- title + ": " + full file path for current buffer."
  (interactive "sSet frame title to: ")
  (setq frame-title title)
  (setq frame-title-format '((concat "" frame-title) ": " (buffer-file-name "%f" (dired-directory dired-directory "%b"))))
)

(defun dev-term (&optional user)
  "Open ansi term"
  (interactive)
  (ansi-term "/bin/bash")
  ;; rename buffer to "*cp" or buffer_name if provided.
  (if (and user (not (string= user "")))
    (progn
       (insert (concat "sudo su - " user))
       (term-send-input)
       (rename-buffer (concat "*" user) 1))
    (rename-buffer "*term" 1)
  )
)

(defun dev-shell (&optional user)
  "Open shell"
  (interactive)
  (shell)
  ;; rename buffer to "*cp" or buffer_name if provided.
  (if (and user (not (string= user "")))
    (progn
       (insert (concat "sudo su - " user))
       (comint-send-input)
       (rename-buffer (concat "*" user) 1))
    (rename-buffer "*term" 1)
  )
)

(defun dev-psql (db &optional buffer_name)
  "Open ansi-term and connect to psql db."
  (interactive "sConnect to db: ")
  (shell)
  (insert (concat "psql " db))
  (comint-send-input)
  ;; rename buffer to "*psql" or buffer_name if provided.
  (if (and buffer_name (not (string= buffer_name "")))
    (rename-buffer (concat "*" buffer_name) 1)
    (rename-buffer "*psql" 1)
  )
)

(defun dev-cp (ip port &optional buffer_name)
  "Open shell for Naviserver control port login."
  (interactive "sConnect to ip (default 127.0.0.1): \nsConnect to port: ")
  ;; default ip, useful when calling function interactively.
  (if (string= ip "")
    (set 'ip "127.0.0.1")
  )
  ;; open shell instead of ansi-term so we can cycle through command history.
  (shell)
  (insert (concat "telnet " ip " " port))
  (comint-send-input)
  ;; rename buffer to "*cp" or buffer_name if provided.
  (if (and buffer_name (not (string= buffer_name "")))
    (rename-buffer (concat "*" buffer_name) 1)
    (rename-buffer "*cp" 1)
  )
)

(defun dev-log (log_path)
  "Open log file"
  (interactive "FOpen log file: ")
  (shell)
  (insert (concat "tail -f " log_path))
  (comint-send-input)
  ;; rename buffer as "*" + filename.
  (rename-buffer (concat "*" (file-name-nondirectory log_path)) 1)
)

(defun dev-load-tcl (tcl_path)
  "Open buffers for .tcl files in tcl_path, set location of TAGS table."
  (interactive "FLoad tcl files in: ")
  (cd tcl_path)
  (find-file "*.tcl" "wildcards")
)

(defun dev-load-js (js_path)
  "Open buffers for .js files in js_path, set location of TAGS table."
  (interactive "FLoad js files in: ")
  (cd js_path)
  (find-file "*.js" "wildcards")
)
#+end_src

** Disable Linum for some modes such as shell

   Disables line numbers for some modes such as shell...

   #+BEGIN_SRC emacs-lisp
     (setq linum-disabled-modes-list '(eshell-mode wl-summary-mode compilation-mode shell-mode term-mode))
     (defun linum-on ()
       (unless (or (minibufferp) (member major-mode linum-disabled-modes-list)) (linum-mode 1)))
   #+END_SRC

* Global key bindings

#+begin_src emacs-lisp
;;(global-set-key (kbd "<f1>") 'multi-term)
;;(global-set-key (kbd "<f2>") 'dev-term)
;;(global-set-key (kbd "<f3>") 'dev-psql)
;;(global-set-key (kbd "<f4>") 'dev-cp)
;;(global-set-key (kbd "<f5>") 'er/expand-region)
;; (global-set-key (kbd "<f6>") ')
(global-set-key (kbd "<f7>") (lambda() (interactive)(find-file "~/.emacs.d/daniel.org"))) ;; Open config file
(global-set-key (kbd "<f8>") 'reload-config)
;; (global-set-key (kbd "<f9>") ')
;; (global-set-key (kbd "<f10>") ')
;; (global-set-key (kbd "<f11>") ')
;; (global-set-key (kbd "<f12>") ')

;;(global-set-key (kbd "C-<f1>") 'tags-search)
;;(global-set-key (kbd "C-<f2>") 'tags-query-replace)
;; (global-set-key (kbd "<C-f3>") ')
;; (global-set-key (kbd "<C-f4>") ')
;; (global-set-key (kbd "<C-f5>") ')
;; (global-set-key (kbd "<C-f6>") ')
;; (global-set-key (kbd "<C-f7>") ')
;; (global-set-key (kbd "<C-f8>") ')
;; (global-set-key (kbd "<C-f9>") ')
;; (global-set-key (kbd "<C-f11>") ')
;; (global-set-key (kbd "<C-f12>") ')


;; (global-set-key (kbd "<M-f1>") 'dev-shell)
;; (global-set-key (kbd "<M-f2>") ')
;; (global-set-key (kbd "<M-f3>") ')
;; (global-set-key (kbd "<M-f4>") ')
;; (global-set-key (kbd "<M-f5>") ')
;; (global-set-key (kbd "<M-f6>") ')
;; (global-set-key (kbd "<M-f7>") ')
;; (global-set-key (kbd "<M-f8>") ')
;; (global-set-key (kbd "<M-f9>") ')
;; (global-set-key (kbd "<M-f11>") ')
;; (global-set-key (kbd "<M-f12>") ')

;;(global-set-key (kbd "C-o") 'other-window)
;;(global-set-key (kbd "C-s") 'isearch-forward-regexp)
;;(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;;(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
;;(global-set-key (kbd "M-z") 'zap-up-to-char)

;;(global-set-key (kbd "C-n") 'new-empty-buffer)

;; shortcut to skip to next/previous buffer
(global-set-key (kbd "M-]") 'next-buffer)
(global-set-key (kbd "M-[") 'previous-buffer)

;; Easier jumping between frames
;;(global-set-key (kbd "C-o") 'other-window)

#+end_src

*** font scaling

#+begin_src emacs-lisp
;;(global-set-key (kbd "M-=") 'text-scale-increase)
;;(global-set-key (kbd "M--") 'text-scale-decrease)
#+end_src

*** etags search

#+begin_src emacs-lisp
;;(global-set-key (kbd "A-s") 'tags-search)
;;(global-set-key (kbd "A-f") 'tags-query-replace)
#+end_src

*** Searching
#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward)
(global-set-key (kbd "C-r") 'isearch-backward)
(global-set-key (kbd "C-M-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-M-r") 'isearch-backward-regexp)
#+end_src

*** Shortcut to toggle fullscreen mode

#+begin_src emacs-lisp
(defun toggle-fullscreen ()
  (interactive)
  (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
	    		 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
  (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
	    		 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))
  ;;			(set-variable '(truncate-partial-width-window nil))
)
(global-set-key (kbd "C-x 4") 'toggle-fullscreen)
#+end_src


*** Shortcuts to switch between line and char mode, useful when using ansi-term

#+begin_src emacs-lisp
;;(global-set-key (kbd "C-x C-j") 'term-line-mode)
;;(global-set-key (kbd "C-x C-j") 'term-char-mode)
#+end_src

*** Other...
#+begin_src emacs-lisp
;; shortcut for ispell-buffer & flyspell
;;(global-set-key (kbd "C-x C-#") 'ispell-buffer)
;;(global-set-key (kbd "C-x #") 'flyspell-buffer)

;; shortcut for find tag
(global-set-key (kbd "M-.") 'find-tag)

;; shortcut to skip to beggining/end of buffer
(global-set-key (kbd "C-<next>") 'end-of-buffer)
(global-set-key (kbd "C-<prior>") 'beginning-of-buffer)

;; shortcut to skip to next/previous buffer
(global-set-key (kbd "M-<prior>") 'next-buffer)
(global-set-key (kbd "M-<next>") 'previous-buffer)
#+end_src

* Key chords
#+begin_src emacs-lisp
(require 'key-chord)
(key-chord-mode 1)

;; examples...
;;(key-chord-define-global "hj"     'undo)
;;(key-chord-define-global ",."     "<>\C-b")

#+end_src


* TODO

Unsorted stuff dumped in from my existing .emacs file

** Sort out

#+begin_src emacs-lisp
(setq current-language-environment "UTF-8")

;; for now, fix bug of files disappearing from TAGS files messing up
;; M-x tags-search.  in the future, fix the logic in
;; `tags-verify-table' to detect files being removed.  The problem is
;; that in the TAGS buffers, the buffer-local variable
;; `tags-table-files' is out of date.
(defadvice tags-search (before kill-TAGS-buffers activate)
(let ((active-TAGS-bufs
       (delq nil
             (mapcar
              (lambda (x)
                (if (string-match "TAGS$" (buffer-name x)) x nil))
              (buffer-list)))))
  (mapc
   (lambda (x)
     (kill-buffer x))
   active-TAGS-bufs)))

(defun xml-format ()
  (interactive)
  (save-excursion
    (shell-command-on-region (mark) (point) "xmllint --format -" (buffer-name) t)
  )
)

(projectile-global-mode)

;; No tabs!
(setq-default indent-tabs-mode nil)
  (setq tab-width 4)
  (setq indent-tabs-mode nil)

  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  (require 'saveplace)
  (setq-default save-place t)

  (defun reload-config ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        ediff-window-setup-function 'ediff-setup-windows-plain
        save-place-file (concat user-emacs-directory "places")
  )

  ;; Select lines by click-dragging on the margin.
  (defvar *linum-mdown-line* nil)

  (defun line-at-click ()
    (save-excursion
      (let ((click-y (cdr (cdr (mouse-position))))
            (line-move-visual-store line-move-visual))
        (setq line-move-visual t)
        (goto-char (window-start))
        (next-line (1- click-y))
        (setq line-move-visual line-move-visual-store)
        ;; If you are using tabbar substitute the next line with
        ;; (line-number-at-pos))))
        (1+ (line-number-at-pos)))))

  (defun md-select-linum ()
    (interactive)
    (goto-line (line-at-click))
    (set-mark (point))
    (setq *linum-mdown-line*
          (line-number-at-pos)))

  (defun mu-select-linum ()
    (interactive)
    (when *linum-mdown-line*
      (let (mu-line)
        ;; (goto-line (line-at-click))
        (setq mu-line (line-at-click))
        (goto-line (max *linum-mdown-line* mu-line))
        (set-mark (line-end-position))
        (goto-line (min *linum-mdown-line* mu-line))
        (setq *linum-mdown*
              nil))))

  (global-set-key (kbd "<left-margin> <down-mouse-1>") 'md-select-linum)
  (global-set-key (kbd "<left-margin> <mouse-1>") 'mu-select-linum)
  (global-set-key (kbd "<left-margin> <drag-mouse-1>") 'mu-select-linum)



  ;; Split window and switch focus to new window
  (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))

 ;; Disable visible bell as this crashes emacs within an X2GO session
 (setq visible-bell nil)

#+end_src
